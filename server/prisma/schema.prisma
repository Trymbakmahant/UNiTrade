// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  walletAddress String? @unique // Optional wallet address
  email     String?  @unique
  password  String?  // Hashed password for email/password auth
  name      String?
  avatar    String?
  joinDate  DateTime @default(now())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  trades    Trade[]
  portfolio Portfolio[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  pair        String   // e.g., "ETH/USDT"
  type        OrderType
  side        OrderSide
  amount      Decimal
  price       Decimal?
  total       Decimal
  status      OrderStatus @default(PENDING)
  orderType   OrderTypeEnum @default(MARKET)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades Trade[]

  @@map("orders")
}

model Trade {
  id        String   @id @default(cuid())
  orderId   String
  userId    String
  pair      String
  type      OrderSide
  amount    Decimal
  price     Decimal
  total     Decimal
  fee       Decimal
  txHash    String?
  executedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model Portfolio {
  id       String  @id @default(cuid())
  userId   String  @unique
  balance  Decimal @default(0)
  totalPL  Decimal @default(0)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio")
}

enum OrderType {
  MARKET
  LIMIT
  STOP_LOSS
  TAKE_PROFIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  FILLED
  CANCELLED
  REJECTED
}

enum OrderTypeEnum {
  MARKET
  LIMIT
  STOP_LOSS
  TAKE_PROFIT
} 